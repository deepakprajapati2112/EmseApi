"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const licenses_1 = __importDefault(require("@ovyerus/licenses"));
const simple_1 = __importDefault(require("@ovyerus/licenses/simple"));
const detect_indent_1 = __importDefault(require("detect-indent"));
const prompts_1 = __importDefault(require("prompts"));
const wrap_text_1 = __importDefault(require("wrap-text"));
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
const findLicense_1 = __importDefault(require("../findLicense"));
const getLicense_1 = __importDefault(require("../getLicense"));
const osiOnlyIdentifiers = Object.entries(licenses_1.default)
    .filter(([, { osiApproved }]) => osiApproved)
    .map(([identifier]) => identifier);
function run({ license: license_, name: author, email, year, 
// TODO: other fields for other placeholders in @ovyerus/licenses
raw, nonOsi, project, projectName }) {
    return __awaiter(this, void 0, void 0, function* () {
        if (raw) {
            if (!license_)
                throw new Error("Specify what license to print");
            if (!simple_1.default.has(license_))
                throw new Error("license must be a valid SPDX identifier");
            const { licenseText } = yield Promise.resolve().then(() => __importStar(require(`@ovyerus/licenses/licenses/${license_}`)));
            console.log(licenseText);
            return;
        }
        const fp = (str) => path_1.default.join(project.path, str);
        let license = license_;
        let filename = "LICENSE";
        const currentLicense = (yield fs_1.promises
            .readdir(fp("./"))
            .then(files => Promise.all(files.map(f => fs_1.promises.lstat(fp(f)))).then(s => s.map((stat, i) => [files[i], stat.isFile()])))).find(([f, isFile]) => isFile && /^LICENSE(\.md|\.txt)?$/i.test(f));
        // Check if an existing LICENSE file already exists
        if (currentLicense) {
            console.log("Looks like there's already a license file for this project.");
            const { replaceLicense } = yield prompts_1.default({
                name: "replaceLicense",
                type: "confirm",
                message: "Do you want to replace it?"
            });
            if (replaceLicense)
                [filename] = currentLicense;
            else
                return console.log("Exiting...");
        }
        if (!license || !simple_1.default.has(license)) {
            const response = yield prompts_1.default({
                name: "license",
                type: "autocomplete",
                message: "Search for the license you want",
                // This + `suggest` is probably super inefficient but its the best we have
                // without repeating code from findLicense
                choices: (nonOsi
                    ? Array.from(simple_1.default)
                    : osiOnlyIdentifiers).map(x => ({ title: x, value: x })),
                suggest: input => Promise.resolve(findLicense_1.default(input, !nonOsi).map(x => ({ title: x, value: x })))
            });
            ({ license } = response);
            if (!license)
                return;
        }
        const text = wrap_text_1.default(getLicense_1.default(license, {
            author,
            year,
            email,
            project: projectName !== null && projectName !== void 0 ? projectName : project.name
        }));
        yield fs_1.promises.writeFile(fp(filename), text);
        // TODO: what other manifests contain license info???
        if (fs_1.existsSync(fp("./package.json"))) {
            const rawPackage = yield fs_1.promises.readFile(fp("./package.json"), "utf-8");
            const { indent } = detect_indent_1.default(rawPackage);
            const pkg = JSON.parse(rawPackage);
            pkg.license = license;
            yield fs_1.promises.writeFile(fp("./package.json"), JSON.stringify(pkg, null, indent));
        }
        console.log(`Successfully wrote the ${license} license`);
        console.log("Most information *should* have been updated with your details but " +
            "it is best to double check to make sure it is all correct.");
    });
}
exports.default = run;
//# sourceMappingURL=run.js.map