"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const simple_1 = __importDefault(require("@ovyerus/licenses/simple"));
const fs_1 = __importDefault(require("fs"));
function getLicense(license, replacements = {}) {
    if (!simple_1.default.has(license))
        throw new TypeError("license is not a valid SPDX identifier");
    let modified = JSON.parse(
    // eslint-disable-next-line no-sync
    fs_1.default.readFileSync(require.resolve(`@ovyerus/licenses/licenses/${license}`), "utf-8")
    // During testing I've found that loading the largest license (~40kb at time of writing)
    // doesn't appear to have an noticeable impact on performance, however should this be made
    // async just in case??
    // Or perhaps use an LRU cache to offset future loads
    ).licenseText;
    for (const [key, value] of Object.entries(replacements).filter(
    // Remove any undefined or falsey values
    ([, value]) => value))
        modified = modified.replace(new RegExp(`<${key}>`, "g"), value);
    return modified;
}
exports.getLicense = getLicense;
exports.default = getLicense;
//# sourceMappingURL=getLicense.js.map